# Strategy for Creating `SIMILAR_TO` Relationships Between Episodes Using Cosine Similarity

## Overview
This document outlines the process for creating bidirectional `:SIMILAR_TO` relationships between `Episode` nodes in Neo4j, based on the cosine similarity of their transcript embeddings. The goal is to capture latent, meaningful connections between episodes that may not be explicitly linked.

---

## Step-by-Step Plan

### 1. Extract and Aggregate Embeddings
- For each episode, retrieve all its `TranscriptSegment` embeddings from Neo4j.
- Compute the **average** of these embeddings to obtain a single vector representing the episode.

### 2. Compute Cosine Similarity Matrix
- For all unique pairs of episodes (A, B), compute the **cosine similarity** between their averaged embeddings.
- Exclude self-pairs (e.g., A vs. A).

### 3. Explore Similarity Distribution
- Collect all similarity scores into a list.
- Visualize the distribution:
  - Plot a **histogram** of all similarity scores.
  - Optionally, create a **heatmap** of the similarity matrix.
- Calculate summary statistics:
  - Mean, median, percentiles, min, max.
- Inspect a few episode pairs at different similarity levels to understand what the scores reflect.

### 4. Choose a Similarity Threshold
- Based on the distribution and qualitative inspection, select a **threshold** (e.g., 0.85, 0.9, or a chosen percentile).
- The threshold should balance **meaningful connections** and **network density**.

### 5. Identify Similar Episode Pairs
- For every pair (A, B) where similarity â‰¥ threshold, record the pair.
- For each such pair, create two relationships:
  - `(:Episode {A})-[:SIMILAR_TO {score: ...}]->(:Episode {B})`
  - `(:Episode {B})-[:SIMILAR_TO {score: ...}]->(:Episode {A})`
- Store the similarity **score as a property** on the relationship.

### 6. (Optional) Remove Existing `SIMILAR_TO` Relationships
- Before creating new relationships, optionally **delete all existing** `:SIMILAR_TO` relationships to avoid duplicates.

### 7. Create `SIMILAR_TO` Relationships in Neo4j
- For each qualifying pair, create both **directed** relationships in Neo4j.
- Use **batch operations** for performance.

### 8. Document the Process in Jupyter Notebook
- Document each step:
  - Code for extraction, aggregation, similarity computation, and visualization.
  - Rationale for the chosen threshold.
  - Example Cypher queries to inspect the new relationships.
- Save **plots and summary statistics** for reference.

### 9. (After Validation) Move to Script
- Once satisfied, refactor the notebook code into a standalone **Python script**:
  - Connect to Neo4j.
  - Aggregate embeddings.
  - Compute similarities.
  - Create or update `:SIMILAR_TO` relationships for all qualifying pairs in both directions.

---

## Notes

- **Bidirectionality**: Creating both directions is intentional for this use case but increases the number of relationships.
- **Similarity Property**: Storing the similarity score as a property enables easy filtering and analysis.
- **Efficiency**: For large datasets, consider using **batched writes** to Neo4j.
